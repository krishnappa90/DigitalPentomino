/**
 * A handler class, which should be inherited to add a new SettingsEntry.
 * The new SettingsEntry can be added to the {@link SettingsForm} by registering it in {@link CustomSettingsEntryMaster}.
 *
 * All functions need to be implemented for the settings entry to work.
 * As reference for implementation {@link StartPosSettingsEntry} can be used.
 */
class CustomSettingsEntry {
    /**
     * Add a name for the custom settings entry by which it can be accessed.
     * @param heading
     * @param subheading
     */
    constructor(heading, subheading) {
        this._name = SettingsForm.generateSettingsEntryName(heading, subheading);
    }

    /**
     * Creates the html elmement of the settings entry, which is put into the settings-form.
     * @param settingsEntry
     */
    create(settingsEntry) {
        throw new Error("This function should be overwritten");
    }

    /**
     * Data needs to be collected from the settings entry and returned.
     * @param formElement
     */
    collect(formElement) {
        throw new Error("This function should be overwritten");
    }

    /**
     * The settings entry element is updated with new values.
     * @param heading
     * @param subheading
     * @param schemaEntry
     * @param selectedValue
     * @param formElement
     */
    update(heading, subheading, schemaEntry, selectedValue, formElement) {
        throw new Error("This function should be overwritten");
    }

    /**
     * A settingsValue is transformed into the seed value.
     * @param schemaEntry
     * @param settingsValue
     */
    parseSettingsToSeed(schemaEntry, settingsValue) {
        throw new Error("This function should be overwritten");
    }

    /**
     * The seed value is used to parse the actual settings value.
     * @param schemaEntry
     * @param remainingSeed
     * @param settingsEntry
     * @param key
     * @param seed
     */
    parseFromSeed(schemaEntry, remainingSeed, settingsEntry, key, seed) {
        throw new Error("This function should be overwritten");
    }

    /**
     * This function is called once the value of this settings entry was changed.
     * @param settingsValue
     * @param pd
     */
    processChangesToSettings(settingsValue, pd) {
        throw new Error("This function should be overwritten");
    }

    /**
     * Returns the name of the settingsentry generated by the name defined in the constructor.
     * @returns {string}
     */
    getName() {
        return this._name;
    }
}
